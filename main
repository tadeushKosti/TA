pragma solidity ^0.8.0;

contract AssetToken {
   string public name;
   string public symbol;
   uint8 public decimals = 18;

   mapping (address => uint256) private balances;
   mapping (address => mapping (address => uint256)) private allowances;

   uint256 private _totalSupply;

   constructor (string memory _name, string memory _symbol, uint256 _initialSupply) {
      name = _name;
      symbol = _symbol;
      _totalSupply = _initialSupply;
      balances[msg.sender] = _totalSupply;
      emit Transfer(address(0), msg.sender, _totalSupply);
   }

   function totalSupply() public view returns (uint256) {
      return _totalSupply;
   }

   function balanceOf(address account) public view returns (uint256) {
      return balances[account];
   }

   function transfer(address recipient, uint256 amount) public returns (bool) {
      require(amount <= balances[msg.sender], "Insufficient balance");
      balances[msg.sender] -= amount;
      balances[recipient] += amount;
      emit Transfer(msg.sender, recipient, amount);
      return true;
    }

    function allowance(address owner, address spender) public view returns (uint256) {
      return allowances[owner][spender];
    }

    function approve(address spender, uint256 amount) public returns (bool) {
      allowances[msg.sender][spender] = amount;
      emit Approval(msg.sender, spender, amount);
      return true;
    }

    function transferFrom(address sender, address recipient, uint256 amount) public returns (bool) {
      require(amount <= balances[sender], "Insufficient balance");
      require(amount <= allowances[sender][msg.sender], "Insufficient allowance");
      balances[sender] -= amount;
      balances[recipient] += amount;
      allowances[sender][msg.sender] -= amount;
      emit Transfer(sender, recipient, amount);
      return true;
   }

   event Transfer(address indexed from, address indexed to, uint256 value);

   event Approval(address indexed owner, address indexed spender, uint256 value);
}
